#--------------------------------------------------------
#     Refer to closureAppDirStructure.txt               |
#--------------------------------------------------------
appNamespace= aloy.App
appNamespace_export= al.TestNameExport
appNamespace_test= al.TestName

projectDir = BuildWithClosure
appRootPath = src
outputDir= ${buildDir}/bin


#--------------------------------------------------------
#     closure templates                                 |
#--------------------------------------------------------
soyJar = ${buildDir}/jar/SoyToJsSrcCompiler.jar
soyDir = ${appRootPath}
soyFiles = **/*.soy
soyCompilerOptions = --outputPathFormat {INPUT_DIRECTORY}/{INPUT_FILE_NAME_NO_EXT}.soy.js \
                     --shouldProvideRequireSoyNamespaces \
                     --shouldGenerateJsdoc \
                     --cssHandlingScheme REFERENCE


#--------------------------------------------------------
#     DepsWriter                                        |
#     - Writes the dependency file for loading my App's |
#       direct js files (ie. no closure-library files)  |
#--------------------------------------------------------
depsWriterPy= ${closureBuildPath}/depswriter.py

# If there are multiple root dirs then specify mulitple --root_with_prefix in the DepsWriter target
# The 2nd arg 'prefix' is relative to closure's base.js
root_with_prefix= ${appRootPath} ../../../${projectDir}/${appRootPath}

devDepsFile= ${appRootPath}/devDeps.js


#--------------------------------------------------------
#     closure builder                                   |
#--------------------------------------------------------
closureLibDir= ../closure-library
closureBuildPath= ${closureLibDir}/closure/bin/build
closureBuilderPy= ${closureBuildPath}/closurebuilder.py

#param output_mode: compiled | list
outputMode= list

jsFiles= ${buildDir}/jsFiles.txt
jsDepsFiles= ${buildDir}/jsDepsFiles.txt


#--------------------------------------------------------
#     closure compiler                                  |
#--------------------------------------------------------
closureJar= ${buildDir}/jar/ClosureCompiler.jar
externsFile= ${basedir}/${appRootPath}/externs.js
jsOutputFile = ${outputDir}/${appNamespace}.js

devCompileOptions = --compilation_level ADVANCED_OPTIMIZATIONS \
                    --warning_level VERBOSE \
                    --jscomp_error accessControls \
                    --jscomp_error checkTypes \
                    --formatting PRINT_INPUT_DELIMITER \
                    --formatting PRETTY_PRINT \
                    --js_output_file ${jsOutputFile} \
                    --externs ${externsFile} \
                    --debug true

devCompileOptions_test = --compilation_level ADVANCED_OPTIMIZATIONS \
                    --warning_level VERBOSE \
                    --jscomp_off checkTypes \
                    --formatting PRINT_INPUT_DELIMITER \
                    --js_output_file ${jsOutputFile}

exportDevCompileOptions = --compilation_level ADVANCED_OPTIMIZATIONS \
                    --jscomp_error accessControls \
                    --jscomp_error checkTypes \
                    --output_wrapper (function(){%output%}()); \
                    --externs ${externsFile} \
                    --define 'ver=${version}' \
                    --define 'al.ui.isExport=true' \
                    --js_output_file ${jsOutputFile} \
                    --formatting PRINT_INPUT_DELIMITER \
                    --formatting PRETTY_PRINT \
                    --debug true

prodCompileOptions = --compilation_level ADVANCED_OPTIMIZATIONS \
                    --jscomp_off accessControls \
                    --jscomp_off checkTypes \
                    --output_wrapper /*${appNamespace}.${version}*/(function(){%output%}()); \
                    --externs ${externsFile} \
                    --js_output_file ${jsOutputFile}

#--closure_entry_point ${appNamespace}   //required when files passed to --js is not in dependency order
#--compilation_level ADVANCED_OPTIMIZATIONS | SIMPLE_OPTIMIZATIONS | WHITESPACE_ONLY
#--warning_level VERBOSE | DEFAULT | QUIET
#--jscomp_error accessControls, checkTypes
#--jscomp_off

### Format the 'compiled' code for when debugging a bug occurring only in compiled state.
#--debug true (Names anonymous functions and Re-names functions & vars with read-able names, assertions aren't stripped)
#--formatting PRINT_INPUT_DELIMITER, PRETTY_PRINT
#--create_source_map ${outputDir}/sourceMap.txt

#--generate_exports
#--output_wrapper (function(){%output%}());  //For when compiling a JS lib for 3rd party use
#--js_output_file ${outputDir}/output.js
#--output_manifest ${outputDir}/manifest.txt

#--define goog.DEBUG=false  //For stripping out goog lib assertions or your own debug-only code when deploying to prod


#--------------------------------------------------------
#     jsDoc                                             |
#--------------------------------------------------------
jsDocHome= ${buildDir}/jsdoc_toolkit-2.4.0
jsDocAntTaskJar= ${jsDocHome}/jsdoc-toolkit-ant-task-1.1.2.jar
jsDocRhinoJar= ${jsDocHome}/java/classes/js.jar

jsDocInputDir= ${basedir}/${appRootPath}
jsDocOutputDir= ${basedir}/docs
jsDocTemplate= outline
#jsdoc | codeview | outline

jsDocIncludePrivate = true
